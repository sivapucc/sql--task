    SQL  TASK:
     
     1.  Exercise  - 1
    
    • Find the title of each film
          SELECT title FROM movies; 
    • Find the director of each film  
          SELECT director FROM movies;
    • Find the title and director of each film 
          SELECT title,director FROM movies;
    • Find the title and year of each film 
          SELECT title,year FROM movies;
    • Find all the information about each film 
          SELECT * FROM movies;
    Exercise 2
    • Find the movie with a row id of 6 
          SELECT * FROM movies where id=6;
    • Find the movies released in the years between 2000 and 2010 
          SELECT * FROM movies where year>2000 and year<=2010;
    • Find the movies not released in the years between 2000 and 2010 
          SELECT * FROM movies where year<2000 or year>2010;
    • Find the first 5 Pixar movies and their release year 
          SELECT title,year FROM movies limit 5;
   
    Exercise 3 — Tasks 
    • Find all the Toy Story movies 
          SELECT title FROM movies where title like "Toy%";
    • Find all the movies directed by John Lasseter 
          SELECT title FROM movies where director="John Lasseter";
    • Find all the movies (and director) not directed by John Lasseter 
          SELECT title FROM movies where director<>"John Lasseter";
    • Find all the WALL-* movies 
          SELECT title FROM movies where title like "WALL-%";
    Exercise 4 — Tasks 
    • List all directors of Pixar movies (alphabetically), without duplicates 
          SELECT distinct director FROM movies order by director;
    • List the last four Pixar movies released (ordered from most recent to least) 
          SELECT * FROM movies order by year desc limit 4;
    • List the first five Pixar movies sorted alphabetically 
          SELECT * FROM movies order by title limit 5;
    • List the next five Pixar movies sorted alphabetically 
          SELECT * FROM movies order by title limit 5 offset 5;
    Exercise -5
    
    • List all the Canadian cities and their populations 
          select city,population from North_american_cities where country="Canada";
    • Order all the cities in the United States by their latitude from north to south 
          select city from North_american_cities where country="United States" order by latitude Desc;
    • List all the cities west of Chicago, ordered from west to east 
          select city from North_american_cities where longitude<-87.69 order by longitude;
    • List the two largest cities in Mexico (by population) 
          select city from North_american_cities where country="Mexico" order by population desc limit 2;
    • List the third and fourth largest cities (by population) in the United States and their population 
          select city from North_american_cities where country="United States" order by population 	desc limit 2 offset 2;
     
    Exercise 6 — Tasks 
    • Find the domestic and international sales for each movie 
          SELECT title,domestic_sales,international_sales FROM movies inner join boxoffice on movies.id=boxoffice.movie_id ;
    • Show the sales numbers for each movie that did better internationally rather than domestically 
          SELECT title,domestic_sales,international_sales FROM movies inner join boxoffice on movies.id=boxoffice.movie_id where domestic_sales<international_sales;
    • List all the movies by their ratings in descending order 
          SELECT title,rating FROM movies inner join boxoffice on movies.id=boxoffice.movie_id 	order by rating desc;
    Exercise 7 — Tasks 
    
    • Find the list of all buildings that have employees 
          SELECT distinct building_name FROM buildings left join employees on buildings.building_name=employees.building where name is not null;
    • Find the list of all buildings and their capacity 
          SELECT building_name,capacity FROM buildings;
    • List all buildings and the distinct employee roles in each building (including empty buildings) 
          SELECT distinct building_name,role from buildings left join employees 
          on buildings.building_name = employees.building;	Exercise 8 — Tasks 
    • Find the name and role of all employees who have not been assigned to a building 
          SELECT name,role FROM employees left join buildings on
          buildings.building_name=employees.building where building is null;
    • Find the names of the buildings that hold no employees 
          select building_name,name from buildings left join employees on
          buildings.building_name = employees.building where name is null;Exercise 9 — Tasks 
    
    • List all movies and their combined sales in millions of dollars 
          SELECT title,(domestic_sales+international_sales)/100000[combined sales] FROM movies inner join boxoffice on movies.id=boxoffice.movie_id;
    • List all movies and their ratings in percent 
          SELECT title,(rating*10)[ratings percentage] FROM movies inner join boxoffice on movies.id=boxoffice.movie_id;	
    • List all movies that were released on even number years 
          SELECT title,year from movies where year%2=0;Exercise 10 — Tasks 
    • Find the longest time that an employee has been at the studio 
          SELECT name,max(years_employed) FROM employees;
    • For each role, find the average number of years employed by employees in that role 
          SELECT role,avg(years_employed)as [work experience] FROM employees group by role;
    • Find the total number of employee years worked in each building 
          SELECT building,sum(years_employed) as [total no emp exp] FROM employees group by building;Exercise 11 — Tasks
    
    • Find the number of Artists in the studio (without a HAVING clause) 
          SELECT role,count(role)as[count] FROM employees where role is "Artist";
    • Find the number of Employees of each role in the studio 
          SELECT role,count(name) FROM employees group by role;
    • Find the total number of years employed by all Engineers 
          SELECT role,sum(years_employed) FROM employees where role is 'Engineer';Exercise 12 — Tasks 
    • Find the number of movies each director has directed 
          SELECT director,count(title)as[no movies] FROM movies group by director;
    • Find the total domestic and international sales that can be attributed to each director 
          select director,(domestic_sales+international_sales)as [total sales] from movies left join 	boxoffice on movies.id=boxoffice.movie_id group by director ;Exercise 13 — Tasks 
    • Add the studio's new production, Toy Story 4 to the list of movies (you can use any director) 
          INSERT INTO movies (id,title,director,year,length_minutes)values(15,'Toy Story 4','John Lasseter','2014',102);
    • Toy Story 4 has been released to critical acclaim! It had a rating of 8.7, and made 340 million domestically and 270 million internationally. Add the record to the BoxOffice table. 
          insert into boxoffice 	(movie_id,rating,domestic_sales,international_sales)values(15,8.7,340000000,270000000);Exercise 14 — Tasks 
     
    • The director for A Bug's Life is incorrect, it was actually directed by John Lasseter 
          update movies set director="John Lasseter" where id=2;
    
    • The year that Toy Story 2 was released is incorrect, it was actually released in 1999 
          update movies set year="1999" where id=3;
    
    • Both the title and director for Toy Story 8 is incorrect! The title should be "Toy Story 3" and it was directed by Lee Unkrich 
          update movies set title="Toy Story 3",director="Lee Unkrich" where id=11;Exercise 15 — Tasks 
    • This database is getting too big, lets remove all movies that were released before 2005. 
           DELETE from movies where year<2005;
    • Andrew Stanton has also left the studio, so please remove all movies directed by him. 
          DELETE FROM movies where director="Andrew Stanton";Exercise 16 — Tasks 
    • Create a new table named Database with the following columns:
    • – Name A string (text) describing the name of the database
– Version A number (floating point) of the latest version of this database
– Download_count An integer count of the number of times this database was downloaded
    • This table has no constraints. 
          CREATE table Database (Name text ,Version float,Download_count int); Exercise 17 — Tasks 
    • Add a column named Aspect_ratio with a FLOAT data type to store the aspect-ratio each movie was released in. 
          ALTER TABLE movies add Aspect_ratio float;
    • Add another column named Language with a TEXT data type to store the language that the movie was released in. Ensure that the default for this language is English. 
          ALTER TABLE movies add Language text default 'english';Exercise 18 — Tasks 
    • We've sadly reached the end of our lessons, lets clean up by removing the Movies table 
          DROP TABLE movies;
    • And drop the BoxOffice table as well 
          DROP TABLE boxoffice;
